# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Car(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, brand: str=None, model: str=None, mileage: int=None, count_owners: int=None, year: int=None, price: int=None):  # noqa: E501
        """Car - a model defined in Swagger

        :param id: The id of this Car.  # noqa: E501
        :type id: int
        :param brand: The brand of this Car.  # noqa: E501
        :type brand: str
        :param model: The model of this Car.  # noqa: E501
        :type model: str
        :param mileage: The mileage of this Car.  # noqa: E501
        :type mileage: int
        :param count_owners: The count_owners of this Car.  # noqa: E501
        :type count_owners: int
        :param year: The year of this Car.  # noqa: E501
        :type year: int
        :param price: The price of this Car.  # noqa: E501
        :type price: int
        """
        self.swagger_types = {
            'id': int,
            'brand': str,
            'model': str,
            'mileage': int,
            'count_owners': int,
            'year': int,
            'price': int
        }

        self.attribute_map = {
            'id': 'id',
            'brand': 'brand',
            'model': 'model',
            'mileage': 'mileage',
            'count_owners': 'countOwners',
            'year': 'year',
            'price': 'price'
        }
        self._id = id
        self._brand = brand
        self._model = model
        self._mileage = mileage
        self._count_owners = count_owners
        self._year = year
        self._price = price

    def to_dict(self):
        return {"brand": self._brand,
    "countOwners": self._count_owners,
    "id": self._id,
    "mileage": self._mileage,
    "model": self._model,
    "price": self._price,
    "year": self._year}

    @classmethod
    def from_dict(cls, dikt) -> 'Car':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Car of this Car.  # noqa: E501
        :rtype: Car
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Car.

        Unique identifier  # noqa: E501

        :return: The id of this Car.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Car.

        Unique identifier  # noqa: E501

        :param id: The id of this Car.
        :type id: int
        """

        self._id = id

    @property
    def brand(self) -> str:
        """Gets the brand of this Car.

        Brand of car  # noqa: E501

        :return: The brand of this Car.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand: str):
        """Sets the brand of this Car.

        Brand of car  # noqa: E501

        :param brand: The brand of this Car.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")  # noqa: E501

        self._brand = brand

    @property
    def model(self) -> str:
        """Gets the model of this Car.

        Model of car  # noqa: E501

        :return: The model of this Car.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this Car.

        Model of car  # noqa: E501

        :param model: The model of this Car.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def mileage(self) -> int:
        """Gets the mileage of this Car.

        Mileage of car  # noqa: E501

        :return: The mileage of this Car.
        :rtype: int
        """
        return self._mileage

    @mileage.setter
    def mileage(self, mileage: int):
        """Sets the mileage of this Car.

        Mileage of car  # noqa: E501

        :param mileage: The mileage of this Car.
        :type mileage: int
        """
        if mileage is None:
            raise ValueError("Invalid value for `mileage`, must not be `None`")  # noqa: E501

        self._mileage = mileage

    @property
    def count_owners(self) -> int:
        """Gets the count_owners of this Car.

        Number of owners  # noqa: E501

        :return: The count_owners of this Car.
        :rtype: int
        """
        return self._count_owners

    @count_owners.setter
    def count_owners(self, count_owners: int):
        """Sets the count_owners of this Car.

        Number of owners  # noqa: E501

        :param count_owners: The count_owners of this Car.
        :type count_owners: int
        """
        if count_owners is None:
            raise ValueError("Invalid value for `count_owners`, must not be `None`")  # noqa: E501

        self._count_owners = count_owners

    @property
    def year(self) -> int:
        """Gets the year of this Car.

        Year of manufacture of car  # noqa: E501

        :return: The year of this Car.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this Car.

        Year of manufacture of car  # noqa: E501

        :param year: The year of this Car.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    @property
    def price(self) -> int:
        """Gets the price of this Car.

        Price of car  # noqa: E501

        :return: The price of this Car.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this Car.

        Price of car  # noqa: E501

        :param price: The price of this Car.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price
